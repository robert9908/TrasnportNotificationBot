using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Telegram.Bot;
using Telegram.Bot.Exceptions;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using TransportBot.Core.Entities;
using TransportBot.Core.Interfaces;
using TransportBot.Core.DTOs;

namespace TransportBot.Services.Services
{
    public class TelegramBotService : ITelegramBotService
    {
        private readonly ITelegramBotClient _botClient;
        private readonly ILogger<TelegramBotService> _logger;
        private readonly IUserService _userService;
        private readonly ITransportStopService _transportStopService;
        private readonly ITransportApiService _transportApiService;
        private readonly ISubscriptionService _subscriptionService;
        private readonly IRouteService _routeService;

        public TelegramBotService(
            IConfiguration configuration,
            ILogger<TelegramBotService> logger,
            IUserService userService,
            ITransportStopService transportStopService,
            ISubscriptionService subscriptionService,
            IRouteService routeService,
            ITransportApiService transportApiService)
        {
            var botToken = configuration["TelegramBot:Token"] 
                ?? throw new ArgumentException("Telegram bot token not found in configuration");
            
            _botClient = new TelegramBotClient(botToken);
            _logger = logger;
            _userService = userService;
            _transportStopService = transportStopService;
            _subscriptionService = subscriptionService;
            _routeService = routeService;
            _transportApiService = transportApiService;
        }

        private async Task ShowNearbyFromStoredLocationAsync(long chatId, long userId, int distance)
        {
            var user = await _userService.GetUserByTelegramIdAsync(chatId);
            if (user?.LocationLatitude is double lat && user?.LocationLongitude is double lon)
            {
                var stations = await _transportApiService.GetNearbyStationsAsync(lat, lon, distance);
                var list = stations.Take(10).ToList();
                if (list.Any())
                {
                    var buttons = new List<List<(string text, string callbackData)>>();
                    foreach (var st in list)
                    {
                        var title = $"üìç {st.Title} ({st.Distance:F0} –º)";
                        buttons.Add(new List<(string, string)>{(title, $"yst_{st.Code}")});
                    }
                    await SendInlineKeyboardAsync(chatId, "üöè –ë–ª–∏–∂–∞–π—à–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ (–Ø–Ω–¥–µ–∫—Å):", buttons);
                }
                else
                {
                    await SendMessageAsync(chatId, "–†—è–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞–Ω—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /search <–Ω–∞–∑–≤–∞–Ω–∏–µ>.");
                }
            }
            else
            {
                await SendMessageAsync(chatId, "–õ–æ–∫–∞—Ü–∏—è –Ω–µ –∑–∞–¥–∞–Ω–∞. –ó–∞–¥–∞–π—Ç–µ: /setlocation <lat> <lon>");
            }
        }

        public async Task HandleUpdateAsync(Update update)
        {
            try
            {
                switch (update.Type)
                {
                    case UpdateType.Message:
                        await HandleMessageAsync(update.Message!);
                        break;
                    case UpdateType.CallbackQuery:
                        await HandleCallbackQueryAsync(update.CallbackQuery!);
                        break;
                    default:
                        _logger.LogWarning("Unhandled update type: {UpdateType}", update.Type);
                        break;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error handling Telegram update: {UpdateType}", update.Type);
                
                try
                {
                    var chatId = update.Message?.Chat.Id ?? update.CallbackQuery?.Message?.Chat.Id;
                    if (chatId.HasValue)
                    {
                        await SendMessageAsync(chatId.Value, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
                    }
                }
                catch (Exception sendEx)
                {
                    _logger.LogError(sendEx, "Failed to send error message to user");
                }
            }
        }

        private async Task HandleMessageAsync(Message message)
        {
            var chatId = message.Chat.Id;
            var userId = message.From?.Id ?? 0;

            await _userService.RegisterAsync(userId, message.From?.Username);

            switch (message.Type)
            {
                case MessageType.Text:
                    await HandleTextMessageAsync(chatId, message.Text!, userId);
                    break;
                case MessageType.Location:
                    await HandleLocationAsync(chatId, message.Location!, userId);
                    break;
                default:
                    _logger.LogWarning("Unhandled message type: {MessageType} from user {UserId}", message.Type, userId);
                    break;
            }
        }

        private async Task HandleTextMessageAsync(long chatId, string text, long userId)
        {
            if (text.StartsWith("/search", StringComparison.OrdinalIgnoreCase))
            {
                var searchQuery = text.Length > 7 ? text.Substring(7).Trim() : string.Empty;
                await SearchStopsByNameAsync(chatId, searchQuery);
                return;
            }
            if (text.StartsWith("/diag_station", StringComparison.OrdinalIgnoreCase))
            {
                var code = text.Length > 13 ? text.Substring(13).Trim() : string.Empty;
                if (string.IsNullOrWhiteSpace(code))
                {
                    await SendMessageAsync(chatId, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /diag_station <–∫–æ–¥_—Å—Ç–∞–Ω—Ü–∏–∏_–Ø–Ω–¥–µ–∫—Å>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /diag_station s9602494");
                    return;
                }

                await SendMessageAsync(chatId, $"üîé –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç–∞–Ω—Ü–∏–∏ {code}: –∑–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ...");
                var arrivals = await _transportApiService.GetArrivalsAsync(code);
                var list = arrivals.ToList();
                if (list.Any())
                {
                    var sample = string.Join("\n", list.Take(3).Select(a => $"‚Ä¢ {a.RouteName} ({a.RouteNumber}) ‚Äî —á–µ—Ä–µ–∑ {a.MinutesUntilArrival} –º–∏–Ω"));
                    await SendMessageAsync(chatId, $"‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {list.Count}\n{sample}");
                }
                else
                {
                    await SendMessageAsync(chatId, "‚ùå –¢–∞–±–ª–æ –ø—É—Å—Ç–æ–µ. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –ª–æ–≥–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞ (URL –∏ Raw-–æ—Ç–≤–µ—Ç). –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–¥ —Å—Ç–∞–Ω—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏ –µ—Å—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è.");
                }
                return;
            }
            if (text.StartsWith("/station", StringComparison.OrdinalIgnoreCase))
            {
                var code = text.Length > 8 ? text.Substring(8).Trim() : string.Empty;
                if (string.IsNullOrWhiteSpace(code))
                {
                    await SendMessageAsync(chatId, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /station <–∫–æ–¥_—Å—Ç–∞–Ω—Ü–∏–∏_–Ø–Ω–¥–µ–∫—Å>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /station s9602494\n\nüí° –ö–æ–¥—ã —Å—Ç–∞–Ω—Ü–∏–π –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ: https://rasp.yandex.ru");
                    return;
                }

                await SendMessageAsync(chatId, $"üìç –°—Ç–∞–Ω—Ü–∏—è: {code}. –ó–∞–≥—Ä—É–∂–∞—é –±–ª–∏–∂–∞–π—à–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è...");
                var arrivals = await _transportApiService.GetArrivalsAsync(code);
                var list = arrivals.Take(8).ToList();
                if (list.Any())
                {
                    var buttons = new List<List<(string text, string callbackData)>>();
                    foreach (var a in list)
                    {
                        var title = $"{GetRouteIcon(a.RouteType)} {a.RouteName} ‚Ä¢ —á–µ—Ä–µ–∑ {a.MinutesUntilArrival} –º–∏–Ω";
                        var cb = $"yrt_{code}_{a.RouteNumber}";
                        buttons.Add(new List<(string, string)>{(title, cb)});
                    }
                    await SendInlineKeyboardAsync(chatId, "üïí –ë–ª–∏–∂–∞–π—à–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", buttons);
                }
                else
                {
                    await SendMessageAsync(chatId, "–ù–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ —ç—Ç–æ–π —Å—Ç–∞–Ω—Ü–∏–∏.");
                }
                return;
            }
            if (text.StartsWith("/setlocation", StringComparison.OrdinalIgnoreCase))
            {
                var args = text.Split(' ', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
                if (args.Length == 3 && double.TryParse(args[1], System.Globalization.CultureInfo.InvariantCulture, out var lat)
                    && double.TryParse(args[2], System.Globalization.CultureInfo.InvariantCulture, out var lon))
                {
                    var user = await _userService.RegisterAsync(userId, null);
                    await _userService.UpdateAsync(user.Id, null, lat, lon);
                    await SendMessageAsync(chatId, $"‚úÖ –õ–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {lat:F6}, {lon:F6}. –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π...");
                    await ShowNearbyFromStoredLocationAsync(chatId, userId, 1200);
                }
                else
                {
                    await SendMessageAsync(chatId, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setlocation <lat> <lon>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /setlocation 55.7558 37.6176");
                }
                return;
            }
            if (string.Equals(text, "/nearby", StringComparison.OrdinalIgnoreCase))
            {
                await ShowNearbyFromStoredLocationAsync(chatId, userId, 1200);
                return;
            }

            switch (text.ToLower())
            {
                case "/start":
                    await SendWelcomeMessageAsync(chatId);
                    break;
                case "/help":
                    await SendHelpMessageAsync(chatId);
                    break;
                case "/nearby":
                    await ShowNearbyFromStoredLocationAsync(chatId, userId, 1200);
                    break;
                case "/subscriptions":
                    await ShowUserSubscriptionsAsync(chatId, userId);
                    break;
                case "/stops":
                    await ShowAllStopsAsync(chatId);
                    break;
                case "/moscow":
                    await ShowMoscowStopsAsync(chatId);
                    break;
                default:
                    await SendMessageAsync(chatId, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
                    break;
            }
        }

        private async Task HandleLocationAsync(long chatId, Location location, long userId)
        {
            try
            {
                _logger.LogInformation("Received location from user {UserId}: Lat={Latitude}, Lon={Longitude}", 
                    userId, location.Latitude, location.Longitude);

                var user = await _userService.RegisterAsync(userId, null);
                await _userService.UpdateAsync(user.Id, null, location.Latitude, location.Longitude);

                await SendMessageAsync(chatId, $"‚úÖ –õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞!\nüìç –®–∏—Ä–æ—Ç–∞: {location.Latitude:F6}\nüìç –î–æ–ª–≥–æ—Ç–∞: {location.Longitude:F6}");
                
                await SendMessageAsync(chatId, "üîç –ò—â—É –±–ª–∏–∂–∞–π—à–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...");
                
                var stations = await _transportApiService.GetNearbyStationsAsync(location.Latitude, location.Longitude, 1200);
                var stationsList = stations.Take(10).ToList();

                _logger.LogInformation("Found {Count} nearby Yandex stations for user {UserId}", stationsList.Count, userId);

                if (stationsList.Any())
                {
                    var buttons = new List<List<(string text, string callbackData)>>();
                    
                    foreach (var st in stationsList)
                    {
                        var title = $"üìç {st.Title} ({st.Distance:F0} –º)";
                        buttons.Add(new List<(string, string)>{(title, $"yst_{st.Code}")});
                    }

                    await SendInlineKeyboardAsync(chatId, "üöè –í—ã–±–µ—Ä–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∫—É (–¥–∞–Ω–Ω—ã–µ –Ø–Ω–¥–µ–∫—Å):", buttons);
                }
                else
                {
                    await SendMessageAsync(chatId, "üòî –†—è–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞–Ω—Ü–∏–π –≤ —Ä–∞–¥–∏—É—Å–µ 1.2 –∫–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /search <–Ω–∞–∑–≤–∞–Ω–∏–µ>");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error handling location from user {UserId}", userId);
                await SendMessageAsync(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
            }
        }

        private async Task HandleCallbackQueryAsync(CallbackQuery callbackQuery)
        {
            var chatId = callbackQuery.Message!.Chat.Id;
            var data = callbackQuery.Data!;
            var userId = callbackQuery.From.Id;

            await _botClient.AnswerCallbackQueryAsync(callbackQuery.Id);

            if (data == "moscow_stops")
            {
                await ShowMoscowStopsAsync(chatId);
            }
            else if (data == "all_stops")
            {
                await ShowAllStopsAsync(chatId);
            }
            else if (data.StartsWith("yst_"))
            {
                var stationCode = data.Substring(4);
                await SendMessageAsync(chatId, $"üìç –°—Ç–∞–Ω—Ü–∏—è: {stationCode}. –ó–∞–≥—Ä—É–∂–∞—é –±–ª–∏–∂–∞–π—à–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è...");

                var arrivals = await _transportApiService.GetArrivalsAsync(stationCode);
                var list = arrivals.Take(8).ToList();

                if (list.Any())
                {
                    var buttons = new List<List<(string text, string callbackData)>>();
                    foreach (var a in list)
                    {
                        var title = $"{GetRouteIcon(a.RouteType)} {a.RouteName} ‚Ä¢ —á–µ—Ä–µ–∑ {a.MinutesUntilArrival} –º–∏–Ω";
                        var cb = $"yrt_{stationCode}_{a.RouteNumber}";
                        buttons.Add(new List<(string, string)>{(title, cb)});
                    }

                    await SendInlineKeyboardAsync(chatId, "üïí –ë–ª–∏–∂–∞–π—à–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ø–Ω–¥–µ–∫—Å):", buttons);
                }
                else
                {
                    await SendMessageAsync(chatId, "–ù–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ —ç—Ç–æ–π —Å—Ç–∞–Ω—Ü–∏–∏.");
                }
            }
            else if (data.StartsWith("yrt_"))
            {
                var parts = data.Split('_');
                if (parts.Length >= 3)
                {
                    var stationCode = parts[1];
                    var routeNumber = string.Join('_', parts.Skip(2));

                    var minutes = await _transportApiService.GetMinutesUntilArrivalAsync(routeNumber, stationCode);
                    if (minutes >= 0)
                    {
                        await SendMessageAsync(chatId, $"‚úÖ –ú–∞—Ä—à—Ä—É—Ç ‚Ññ{routeNumber}\nüìç –°—Ç–∞–Ω—Ü–∏—è: {stationCode}\n‚è∞ –ü—Ä–∏–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω");
                    }
                    else
                    {
                        await SendMessageAsync(chatId, $"–î–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ ‚Ññ{routeNumber} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–±—ã—Ç–∏–∏.");
                    }

                    var buttons = new List<List<(string text, string callbackData)>>
                    {
                        new() { ("‚è∞ –ó–∞ 5 –º–∏–Ω—É—Ç", $"ynotify_{stationCode}_{routeNumber}_5"), ("‚è∞ –ó–∞ 10 –º–∏–Ω—É—Ç", $"ynotify_{stationCode}_{routeNumber}_10") },
                        new() { ("‚è∞ –ó–∞ 15 –º–∏–Ω—É—Ç", $"ynotify_{stationCode}_{routeNumber}_15"), ("‚è∞ –ó–∞ 20 –º–∏–Ω—É—Ç", $"ynotify_{stationCode}_{routeNumber}_20") }
                    };

                    await SendInlineKeyboardAsync(chatId, "‚è∞ –ó–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –ø—Ä–∏–±—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª—è—Ç—å?", buttons);
                }
            }
            else if (data.StartsWith("ynotify_"))
            {
                var parts = data.Split('_');
                if (parts.Length >= 4)
                {
                    var stationCode = parts[1];
                    var routeNumber = parts[2];
                    var minutes = int.Parse(parts[3]);

                    var user = await _userService.GetUserByTelegramIdAsync(chatId);
                    if (user != null)
                    {
                        var subscription = new Subscription
                        {
                            UserId = user.Id,
                            ExternalStopCode = stationCode,
                            ExternalRouteNumber = routeNumber,
                            NotifyBeforeMinutes = minutes,
                            IsActive = true,
                            CreatedAt = DateTime.UtcNow
                        };

                        await _subscriptionService.CreateSubscriptionAsync(subscription);
                        await SendMessageAsync(chatId, $"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\nüìç –°—Ç–∞–Ω—Ü–∏—è: {stationCode}\nüöå –ú–∞—Ä—à—Ä—É—Ç: {routeNumber}\n‚è∞ –ó–∞ {minutes} –º–∏–Ω—É—Ç –¥–æ –ø—Ä–∏–±—ã—Ç–∏—è");
                    }
                }
            }
            else if (data.StartsWith("stop_"))
            {
                var stopId = int.Parse(data.Replace("stop_", ""));
                var stop = await _transportStopService.GetStopAsync(stopId);
                
                if (stop != null)
                {
                    await SendMessageAsync(chatId, $"üìç –í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫—É: {stop.Name}");
                    
                    var routes = await _routeService.GetRoutesByStopAsync(stopId);
                    var routesList = routes.ToList();

                    if (routesList.Any())
                    {
                        var buttons = new List<List<(string text, string callbackData)>>();
                        
                        foreach (var route in routesList.Take(8))
                        {
                            var routeIcon = GetRouteIcon(route.Type);
                            buttons.Add(new List<(string, string)> 
                            { 
                                ($"{routeIcon} {route.Name}", $"route_{stopId}_{route.Id}") 
                            });
                        }

                        await SendInlineKeyboardAsync(chatId, "üöå –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:", buttons);
                    }
                    else
                    {
                        await SendMessageAsync(chatId, "üòî –ù–∞ —ç—Ç–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤.");
                    }
                }
            }
            else if (data.StartsWith("route_"))
            {
                var parts = data.Split('_');
                var stopId = int.Parse(parts[1]);
                var routeId = int.Parse(parts[2]);
                
                var stop = await _transportStopService.GetStopAsync(stopId);
                var route = await _routeService.GetRouteAsync(routeId);
                
                if (stop != null && route != null)
                {
                    var routeIcon = GetRouteIcon(route.Type);
                    await SendMessageAsync(chatId, $"‚úÖ –í—ã–±—Ä–∞–Ω–æ:\nüìç {stop.Name}\n{routeIcon} {route.Name}");
                    
                    var buttons = new List<List<(string text, string callbackData)>>
                    {
                        new() { ("‚è∞ –ó–∞ 5 –º–∏–Ω—É—Ç", $"notify_{stopId}_{routeId}_5"), ("‚è∞ –ó–∞ 10 –º–∏–Ω—É—Ç", $"notify_{stopId}_{routeId}_10") },
                        new() { ("‚è∞ –ó–∞ 15 –º–∏–Ω—É—Ç", $"notify_{stopId}_{routeId}_15"), ("‚è∞ –ó–∞ 20 –º–∏–Ω—É—Ç", $"notify_{stopId}_{routeId}_20") }
                    };

                    await SendInlineKeyboardAsync(chatId, "‚è∞ –ó–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –ø—Ä–∏–±—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª—è—Ç—å?", buttons);
                }
            }
            else if (data.StartsWith("notify_"))
            {
                var parts = data.Split('_');
                var stopId = int.Parse(parts[1]);
                var routeId = int.Parse(parts[2]);
                var minutes = int.Parse(parts[3]);

                var user = await _userService.GetUserByTelegramIdAsync(chatId);
                if (user != null)
                {
                    var subscription = new Subscription
                    {
                        UserId = user.Id,
                        StopId = stopId,
                        RouteId = routeId,
                        NotifyBeforeMinutes = minutes,
                        IsActive = true,
                        CreatedAt = DateTime.UtcNow
                    };

                    await _subscriptionService.CreateSubscriptionAsync(subscription);
                    
                    var stop = await _transportStopService.GetStopAsync(stopId);
                    var route = await _routeService.GetRouteAsync(routeId);
                    var routeIcon = GetRouteIcon(route?.Type ?? "");
                    
                    await SendMessageAsync(chatId, 
                        $"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n" +
                        $"üìç –û—Å—Ç–∞–Ω–æ–≤–∫–∞: {stop?.Name}\n" +
                        $"{routeIcon} –ú–∞—Ä—à—Ä—É—Ç: {route?.Name}\n" +
                        $"‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ {minutes} –º–∏–Ω—É—Ç –¥–æ –ø—Ä–∏–±—ã—Ç–∏—è");
                }
            }
            else if (data == "my_subscriptions")
            {
                var user = await _userService.RegisterAsync(userId, null);
                var subscriptions = await _subscriptionService.GetUserSubscriptionsAsync(user.Id);
                
                if (subscriptions.Any())
                {
                    var message = "üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n";
                    foreach (var sub in subscriptions)
                    {
                        var status = sub.IsActive ? "‚úÖ" : "‚ùå";
                        var routeIcon = GetRouteIcon(sub.Route?.Type ?? "");
                        message += $"{status} {sub.Stop?.Name} - {routeIcon} {sub.Route?.Name} - –∑–∞ {sub.NotifyBeforeMinutes} –º–∏–Ω\n";
                    }
                    
                    await SendMessageAsync(chatId, message);
                }
                else
                {
                    await SendMessageAsync(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –ª–æ–∫–∞—Ü–∏–µ–π, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É!");
                }
            }
            else if (data == "new_location")
            {
                await SendLocationRequestAsync(chatId, "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫:");
            }
            else if (data.StartsWith("delete_"))
            {
                var subscriptionId = int.Parse(data.Replace("delete_", ""));
                var success = await _subscriptionService.DeleteSubscriptionAsync(subscriptionId);
                
                if (success)
                {
                    await SendMessageAsync(chatId, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞!");
                }
                else
                {
                    await SendMessageAsync(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.");
                }
            }
            else if (data.StartsWith("toggle_"))
            {
                var subscriptionId = int.Parse(data.Replace("toggle_", ""));
                var subscription = await _subscriptionService.GetSubscriptionAsync(subscriptionId);
                
                if (subscription != null)
                {
                    var success = await _subscriptionService.ToggleSubscriptionAsync(subscriptionId, !subscription.IsActive);
                    var status = !subscription.IsActive ? "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" : "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞";
                    
                    if (success)
                    {
                        await SendMessageAsync(chatId, $"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ {status}!");
                    }
                    else
                    {
                        await SendMessageAsync(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏.");
                    }
                }
            }
        }

        private async Task SendWelcomeMessageAsync(long chatId)
        {
            var message = "üöå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ!\n\n" +
                         "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±—ã—Ç–∏–∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.\n\n" +
                         "üîç –°–ø–æ—Å–æ–±—ã –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫:\n" +
                         "üìç –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–∫\n" +
                         "üöâ /station <–∫–æ–¥_—Å—Ç–∞–Ω—Ü–∏–∏> - –ø–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É —Å—Ç–∞–Ω—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /station s9602494)\n\n" +
                         "‚ö†Ô∏è –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (/search) –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç";

            await SendLocationRequestAsync(chatId, message);
        }

        private async Task ShowUserSubscriptionsAsync(long chatId, long userId)
        {
            var user = await _userService.GetUserByTelegramIdAsync(chatId);
            if (user == null)
            {
                await SendMessageAsync(chatId, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /start");
                return;
            }

            var subscriptions = await _subscriptionService.GetUserSubscriptionsAsync(user.Id);
            
            if (subscriptions.Any())
            {
                var message = "üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n";
                foreach (var sub in subscriptions)
                {
                    var status = sub.IsActive ? "‚úÖ" : "‚ùå";
                    var routeIcon = GetRouteIcon(sub.Route?.Type ?? "");
                    message += $"{status} {sub.Stop?.Name} - {routeIcon} {sub.Route?.Name} - –∑–∞ {sub.NotifyBeforeMinutes} –º–∏–Ω\n";
                }
                
                var buttons = new List<List<(string text, string callbackData)>>
                {
                    new() { ("üìç –ù–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è", "new_location") }
                };

                foreach (var sub in subscriptions.Take(5))
                {
                    var toggleText = sub.IsActive ? "‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" : "‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å";
                    buttons.Add(new List<(string, string)> 
                    { 
                        (toggleText, $"toggle_{sub.Id}"),
                        ("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", $"delete_{sub.Id}")
                    });
                }

                await SendInlineKeyboardAsync(chatId, message, buttons);
            }
            else
            {
                await SendMessageAsync(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –ª–æ–∫–∞—Ü–∏–µ–π, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É!");
            }
        }

        private async Task SendHelpMessageAsync(long chatId)
        {
            var helpMessage = @"üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/location - –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ª–æ–∫–∞—Ü–∏–µ–π
/station <–∫–æ–¥> - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∫–æ–¥—É —Å—Ç–∞–Ω—Ü–∏–∏
/subscriptions - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üîî –ö–∞–∫ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
1. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –ª–æ–∫–∞—Ü–∏–µ–π
2. –í—ã–±–µ—Ä–∏—Ç–µ –±–ª–∏–∂–∞–π—à—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
3. –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (5, 10, 15, 20 –º–∏–Ω—É—Ç)
5. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!

üöâ –ö–æ–¥—ã —Å—Ç–∞–Ω—Ü–∏–π –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞: https://rasp.yandex.ru

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º.";

            await SendMessageAsync(chatId, helpMessage);
        }

        private string GetTransportTypeName(string routeType)
        {
            return routeType?.ToLower() switch
            {
                "bus" => "üöå –ê–≤—Ç–æ–±—É—Å—ã",
                "tram" => "üöã –¢—Ä–∞–º–≤–∞–∏",
                "metro" => "üöá –ú–µ—Ç—Ä–æ",
                "minibus" => "üöê –ú–∞—Ä—à—Ä—É—Ç–∫–∏",
                _ => "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
            };
        }

        private async Task ShowMoscowStopsAsync(long chatId)
        {
            await SendMessageAsync(chatId, "üîç –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search <–Ω–∞–∑–≤–∞–Ω–∏–µ>");
        }

        private async Task ShowAllStopsAsync(long chatId)
        {
            await SendMessageAsync(chatId, "üîç –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search <–Ω–∞–∑–≤–∞–Ω–∏–µ>");
        }

        private async Task SearchStopsByNameAsync(long chatId, string searchQuery)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(searchQuery))
                {
                    await SendMessageAsync(chatId, "‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n–ü—Ä–∏–º–µ—Ä: /search –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å");
                    return;
                }

                await SendMessageAsync(chatId, $"üîç –ò—â—É —Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{searchQuery}\"...");
                
                _logger.LogInformation("Searching for stations with query: {Query}", searchQuery);
                var stations = await _transportApiService.SearchStationsAsync(searchQuery);
                var list = stations.Take(10).ToList();
                
                _logger.LogInformation("Found {Count} stations for query: {Query}", list.Count, searchQuery);

                if (list.Any())
                {
                    var buttons = new List<List<(string text, string callbackData)>>();
                    
                    foreach (var st in list)
                    {
                        var title = $"üìç {st.Title}";
                        buttons.Add(new List<(string, string)>{(title, $"yst_{st.Code}")});
                    }

                    await SendInlineKeyboardAsync(chatId, $"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{searchQuery}\":", buttons);
                }
                else
                {
                    await SendMessageAsync(chatId, $"‚ùå –°—Ç–∞–Ω—Ü–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{searchQuery}\" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ /search –ú–æ—Å–∫–≤–∞ {searchQuery}\n‚Ä¢ /search –º–µ—Ç—Ä–æ {searchQuery}\n‚Ä¢ /station s9602494 (–ø—Ä—è–º–æ–π –∫–æ–¥)");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error searching stops by name: {SearchQuery}", searchQuery);
                await SendMessageAsync(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∞–Ω—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /station —Å –ø—Ä—è–º—ã–º –∫–æ–¥–æ–º —Å—Ç–∞–Ω—Ü–∏–∏.");
            }
        }

        public async Task SendMessageAsync(long chatId, string message)
        {
            try
            {
                await _botClient.SendTextMessageAsync(chatId, message);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to send message to chat {ChatId}", chatId);
            }
        }

        public async Task SendLocationRequestAsync(long chatId, string message)
        {
            try
            {
                var keyboard = new ReplyKeyboardMarkup(new[]
                {
                    new KeyboardButton("üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ª–æ–∫–∞—Ü–∏–µ–π") { RequestLocation = true }
                })
                {
                    ResizeKeyboard = true,
                    OneTimeKeyboard = true
                };

                await _botClient.SendTextMessageAsync(chatId, message, replyMarkup: keyboard);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to send location request to chat {ChatId}", chatId);
            }
        }

        public async Task SendInlineKeyboardAsync(long chatId, string message, List<List<(string text, string callbackData)>> buttons)
        {
            try
            {
                var keyboard = new InlineKeyboardMarkup(
                    buttons.Select(row =>
                        row.Select(button => InlineKeyboardButton.WithCallbackData(button.text, button.callbackData))
                    )
                );

                await _botClient.SendTextMessageAsync(chatId, message, replyMarkup: keyboard);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to send inline keyboard to chat {ChatId}", chatId);
            }
        }

        private string GetRouteIcon(string routeType)
        {
            return routeType?.ToLower() switch
            {
                "bus" => "üöå",
                "trolleybus" => "üöé",
                "tram" => "üöã",
                "metro" => "üöá",
                "train" => "üöÜ",
                _ => "üöå"
            };
        }
    }
}
